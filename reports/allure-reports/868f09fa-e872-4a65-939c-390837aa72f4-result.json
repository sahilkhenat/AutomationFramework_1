{"name": "test_logout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@class='logout1']\"}\n  (Session info: chrome=100.0.4896.88)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00B87413+2389011]\n\tOrdinal0 [0x00B19F61+1941345]\n\tOrdinal0 [0x00A0C658+837208]\n\tOrdinal0 [0x00A391DD+1020381]\n\tOrdinal0 [0x00A3949B+1021083]\n\tOrdinal0 [0x00A66032+1204274]\n\tOrdinal0 [0x00A54194+1130900]\n\tOrdinal0 [0x00A64302+1196802]\n\tOrdinal0 [0x00A53F66+1130342]\n\tOrdinal0 [0x00A2E546+976198]\n\tOrdinal0 [0x00A2F456+980054]\n\tGetHandleVerifier [0x00D39632+1727522]\n\tGetHandleVerifier [0x00DEBA4D+2457661]\n\tGetHandleVerifier [0x00C1EB81+569713]\n\tGetHandleVerifier [0x00C1DD76+566118]\n\tOrdinal0 [0x00B20B2B+1968939]\n\tOrdinal0 [0x00B25988+1989000]\n\tOrdinal0 [0x00B25A75+1989237]\n\tOrdinal0 [0x00B2ECB1+2026673]\n\tBaseThreadInitThunk [0x750F6739+25]\n\tRtlGetFullPathName_UEx [0x773B8E7F+1215]\n\tRtlGetFullPathName_UEx [0x773B8E4D+1165]", "trace": "self = <login_test.TestLogin object at 0x0000028F3A410B20>\n\n    def test_logout(self):\n        driver = self.driver\n        homepage = HomePage(driver)\n>       homepage.click_logout()\n\ntests\\login_test.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages\\homePage.py:11: in click_logout\n    self.driver.find_element(By.XPATH, self.logout_button_xpath).click()\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1248: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028F3A410580>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x750F6739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x773B8E7F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x773B8E4D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@class='logout1']\"}\nE         (Session info: chrome=100.0.4896.88)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00B87413+2389011]\nE       \tOrdinal0 [0x00B19F61+1941345]\nE       \tOrdinal0 [0x00A0C658+837208]\nE       \tOrdinal0 [0x00A391DD+1020381]\nE       \tOrdinal0 [0x00A3949B+1021083]\nE       \tOrdinal0 [0x00A66032+1204274]\nE       \tOrdinal0 [0x00A54194+1130900]\nE       \tOrdinal0 [0x00A64302+1196802]\nE       \tOrdinal0 [0x00A53F66+1130342]\nE       \tOrdinal0 [0x00A2E546+976198]\nE       \tOrdinal0 [0x00A2F456+980054]\nE       \tGetHandleVerifier [0x00D39632+1727522]\nE       \tGetHandleVerifier [0x00DEBA4D+2457661]\nE       \tGetHandleVerifier [0x00C1EB81+569713]\nE       \tGetHandleVerifier [0x00C1DD76+566118]\nE       \tOrdinal0 [0x00B20B2B+1968939]\nE       \tOrdinal0 [0x00B25988+1989000]\nE       \tOrdinal0 [0x00B25A75+1989237]\nE       \tOrdinal0 [0x00B2ECB1+2026673]\nE       \tBaseThreadInitThunk [0x750F6739+25]\nE       \tRtlGetFullPathName_UEx [0x773B8E7F+1215]\nE       \tRtlGetFullPathName_UEx [0x773B8E4D+1165]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException"}, "attachments": [{"name": "stdout", "source": "2b3b71d4-4a07-486a-b8bc-007c2eb162f8-attachment.txt", "type": "text/plain"}], "start": 1649850028232, "stop": 1649850038273, "uuid": "13d26dae-dedf-44df-a4a0-08cc1486d37e", "historyId": "606d9f046945fff19ea92d7b1a10f16b", "testCaseId": "e89a5a0e9aefe451ee262eba82370b01", "fullName": "tests.login_test.TestLogin#test_logout", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('test_setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "login_test"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "ARPGL006273"}, {"name": "thread", "value": "18324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.login_test"}]}