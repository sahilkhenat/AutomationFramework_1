{"name": "test_logout", "status": "broken", "statusDetails": {"message": "OSError: [Errno 22] Invalid argument: 'D:\\\\PycharmProjects\\\\AutomationFramework_1\\\\screenshots\\\\test_logout_14-04-2022_12:57:17.png'", "trace": "self = <login_test.TestLogin object at 0x000002CAC4CD24C0>\n\n    def test_logout(self):\n        try:\n            driver = self.driver\n            homepage = HomePage(driver)\n>           homepage.click_logout()\n\ntests\\login_test.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.homePage.HomePage object at 0x000002CAC4B707C0>\n\n    def click_logout(self):\n>       self.driver.find_element(By.XPATH, self.logout_button_xpath).click()\n\npages\\homePage.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"52cb4b7e7d380b6704e7166e4fe7fd13\")>, by = 'xpath', value = \"//a[@class='logout1']\"\n\n    def find_element(self, by=By.ID, value=None) -> WebElement:\n        \"\"\"\n        Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = '[id=\"%s\"]' % value\n        elif by == By.TAG_NAME:\n            by = By.CSS_SELECTOR\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = \".%s\" % value\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = '[name=\"%s\"]' % value\n    \n>       return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n            'value': value})['value']\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1248: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"52cb4b7e7d380b6704e7166e4fe7fd13\")>, driver_command = 'findElement', params = {'using': 'xpath', 'value': \"//a[@class='logout1']\"}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:425: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002CAC4CD2100>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x76576739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x779F8E7F+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x779F8E4D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//a[@class='logout1']\"}\nE         (Session info: chrome=100.0.4896.88)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00807413+2389011]\nE       \tOrdinal0 [0x00799F61+1941345]\nE       \tOrdinal0 [0x0068C658+837208]\nE       \tOrdinal0 [0x006B91DD+1020381]\nE       \tOrdinal0 [0x006B949B+1021083]\nE       \tOrdinal0 [0x006E6032+1204274]\nE       \tOrdinal0 [0x006D4194+1130900]\nE       \tOrdinal0 [0x006E4302+1196802]\nE       \tOrdinal0 [0x006D3F66+1130342]\nE       \tOrdinal0 [0x006AE546+976198]\nE       \tOrdinal0 [0x006AF456+980054]\nE       \tGetHandleVerifier [0x009B9632+1727522]\nE       \tGetHandleVerifier [0x00A6BA4D+2457661]\nE       \tGetHandleVerifier [0x0089EB81+569713]\nE       \tGetHandleVerifier [0x0089DD76+566118]\nE       \tOrdinal0 [0x007A0B2B+1968939]\nE       \tOrdinal0 [0x007A5988+1989000]\nE       \tOrdinal0 [0x007A5A75+1989237]\nE       \tOrdinal0 [0x007AECB1+2026673]\nE       \tBaseThreadInitThunk [0x76576739+25]\nE       \tRtlGetFullPathName_UEx [0x779F8E7F+1215]\nE       \tRtlGetFullPathName_UEx [0x779F8E4D+1165]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <login_test.TestLogin object at 0x000002CAC4CD24C0>\n\n    def test_logout(self):\n        try:\n            driver = self.driver\n            homepage = HomePage(driver)\n            homepage.click_logout()\n            x = driver.title\n            print(x)\n            if  x ==\"My Store\":\n                assert True\n            else:\n                assert False\n    \n        except NoSuchElementException as nosuch:\n            print(\"No such element found\")\n            print(nosuch)\n    \n            currTime = moment.now().strftime(\"%d-%m-%Y_%H:%M:%S\")\n            testName = utils.whoami()\n            screenshotName = testName+\"_\"+currTime\n            allure.attach(self.driver.get_screenshot_as_png(), name=screenshotName,\n                          attachment_type=allure.attachment_type.PNG)\n            ss = Screenshot_Clipping.Screenshot()\n>           screen_shot = ss.full_Screenshot(driver, save_path=\"D:/PycharmProjects/AutomationFramework_1/screenshots\", image_name=screenshotName+\".png\")\n\ntests\\login_test.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\Screenshot\\Screenshot_Clipping.py:116: in full_Screenshot\n    stitched_image.save(save_path)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PIL.Image.Image image mode=RGB size=1583x3303 at 0x2CAC4B70100>, fp = 'D:\\\\PycharmProjects\\\\AutomationFramework_1\\\\screenshots\\\\test_logout_14-04-2022_12:57:17.png', format = 'PNG'\nparams = {}, filename = 'D:\\\\PycharmProjects\\\\AutomationFramework_1\\\\screenshots\\\\test_logout_14-04-2022_12:57:17.png', open_fp = True, save_all = False, ext = '.png'\nsave_handler = <function _save at 0x000002CAC6AE68B0>, created = True\n\n    def save(self, fp, format=None, **params):\n        \"\"\"\n        Saves this image under the given filename.  If no format is\n        specified, the format to use is determined from the filename\n        extension, if possible.\n    \n        Keyword options can be used to provide additional instructions\n        to the writer. If a writer doesn't recognise an option, it is\n        silently ignored. The available options are described in the\n        :doc:`image format documentation\n        <../handbook/image-file-formats>` for each writer.\n    \n        You can use a file object instead of a filename. In this case,\n        you must always specify the format. The file object must\n        implement the ``seek``, ``tell``, and ``write``\n        methods, and be opened in binary mode.\n    \n        :param fp: A filename (string), pathlib.Path object or file object.\n        :param format: Optional format override.  If omitted, the\n           format to use is determined from the filename extension.\n           If a file object was used instead of a filename, this\n           parameter should always be used.\n        :param params: Extra parameters to the image writer.\n        :returns: None\n        :exception ValueError: If the output format could not be determined\n           from the file name.  Use the format option to solve this.\n        :exception OSError: If the file could not be written.  The file\n           may have been created, and may contain partial data.\n        \"\"\"\n    \n        filename = \"\"\n        open_fp = False\n        if isinstance(fp, Path):\n            filename = str(fp)\n            open_fp = True\n        elif isPath(fp):\n            filename = fp\n            open_fp = True\n        elif fp == sys.stdout:\n            try:\n                fp = sys.stdout.buffer\n            except AttributeError:\n                pass\n        if not filename and hasattr(fp, \"name\") and isPath(fp.name):\n            # only set the name for metadata purposes\n            filename = fp.name\n    \n        # may mutate self!\n        self._ensure_mutable()\n    \n        save_all = params.pop(\"save_all\", False)\n        self.encoderinfo = params\n        self.encoderconfig = ()\n    \n        preinit()\n    \n        ext = os.path.splitext(filename)[1].lower()\n    \n        if not format:\n            if ext not in EXTENSION:\n                init()\n            try:\n                format = EXTENSION[ext]\n            except KeyError as e:\n                raise ValueError(f\"unknown file extension: {ext}\") from e\n    \n        if format.upper() not in SAVE:\n            init()\n        if save_all:\n            save_handler = SAVE_ALL[format.upper()]\n        else:\n            save_handler = SAVE[format.upper()]\n    \n        created = False\n        if open_fp:\n            created = not os.path.exists(filename)\n            if params.get(\"append\", False):\n                # Open also for reading (\"+\"), because TIFF save_all\n                # writer needs to go back and edit the written data.\n                fp = builtins.open(filename, \"r+b\")\n            else:\n>               fp = builtins.open(filename, \"w+b\")\nE               OSError: [Errno 22] Invalid argument: 'D:\\\\PycharmProjects\\\\AutomationFramework_1\\\\screenshots\\\\test_logout_14-04-2022_12:57:17.png'\n\nvenv\\lib\\site-packages\\PIL\\Image.py:2297: OSError"}, "attachments": [{"name": "test_logout_14-04-2022_12:57:17", "source": "ee2c33a7-6cd1-4db7-b839-c8ab27a93dbb-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "d481fbe5-eed7-4ef0-bc50-30770d8befab-attachment.txt", "type": "text/plain"}], "start": 1649921227794, "stop": 1649921253701, "uuid": "df68f068-10e5-45d3-8018-34739d16958b", "historyId": "606d9f046945fff19ea92d7b1a10f16b", "testCaseId": "e89a5a0e9aefe451ee262eba82370b01", "fullName": "tests.login_test.TestLogin#test_logout", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('test_setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "login_test"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "ARPGL006273"}, {"name": "thread", "value": "24452-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.login_test"}]}